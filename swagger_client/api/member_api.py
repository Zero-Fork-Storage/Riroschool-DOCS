# coding: utf-8

"""
    리로스쿨 API

    리로스쿨 2.9 버전의 API  # noqa: E501

    OpenAPI spec version: 2.9.0
    Contact: develop@rirosoft.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class MemberApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def auth_sign_up_post(self, body, client_id, **kwargs):  # noqa: E501
        """회원가입  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_sign_up_post(body, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Member body: 회원정보 (required)
        :param str client_id: API Key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_sign_up_post_with_http_info(body, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_sign_up_post_with_http_info(body, client_id, **kwargs)  # noqa: E501
            return data

    def auth_sign_up_post_with_http_info(self, body, client_id, **kwargs):  # noqa: E501
        """회원가입  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_sign_up_post_with_http_info(body, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Member body: 회원정보 (required)
        :param str client_id: API Key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_sign_up_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `auth_sign_up_post`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `auth_sign_up_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['client-id'] = params['client_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/sign-up', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def member_change_password_get(self, client_id, site_id, id, password, uuid, **kwargs):  # noqa: E501
        """비밀번호 변경  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.member_change_password_get(client_id, site_id, id, password, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: API Key (required)
        :param str site_id: 학교 아이디 (required)
        :param str id: 아이디 (required)
        :param str password: 비밀번호 (required)
        :param str uuid: 디바이스 고유번호 (비밀번호 생성시 사용) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.member_change_password_get_with_http_info(client_id, site_id, id, password, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.member_change_password_get_with_http_info(client_id, site_id, id, password, uuid, **kwargs)  # noqa: E501
            return data

    def member_change_password_get_with_http_info(self, client_id, site_id, id, password, uuid, **kwargs):  # noqa: E501
        """비밀번호 변경  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.member_change_password_get_with_http_info(client_id, site_id, id, password, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: API Key (required)
        :param str site_id: 학교 아이디 (required)
        :param str id: 아이디 (required)
        :param str password: 비밀번호 (required)
        :param str uuid: 디바이스 고유번호 (비밀번호 생성시 사용) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'site_id', 'id', 'password', 'uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method member_change_password_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `member_change_password_get`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `member_change_password_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `member_change_password_get`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `member_change_password_get`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `member_change_password_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'site_id' in params:
            query_params.append(('siteId', params['site_id']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'password' in params:
            query_params.append(('password', params['password']))  # noqa: E501
        if 'uuid' in params:
            query_params.append(('uuid', params['uuid']))  # noqa: E501

        header_params = {}
        if 'client_id' in params:
            header_params['client-id'] = params['client_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/change-password', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def member_check_id_get(self, client_id, site_id, id, **kwargs):  # noqa: E501
        """아이디 중복체크  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.member_check_id_get(client_id, site_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: API Key (required)
        :param str site_id: 학교 아이디 (required)
        :param str id: 중복체크 할 아이디 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.member_check_id_get_with_http_info(client_id, site_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.member_check_id_get_with_http_info(client_id, site_id, id, **kwargs)  # noqa: E501
            return data

    def member_check_id_get_with_http_info(self, client_id, site_id, id, **kwargs):  # noqa: E501
        """아이디 중복체크  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.member_check_id_get_with_http_info(client_id, site_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: API Key (required)
        :param str site_id: 학교 아이디 (required)
        :param str id: 중복체크 할 아이디 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'site_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method member_check_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `member_check_id_get`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `member_check_id_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `member_check_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['client-id'] = params['client_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/check/{siteId}/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def member_confirm_password_get(self, authorization, client_id, password, **kwargs):  # noqa: E501
        """비밀번호 확인  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.member_confirm_password_get(authorization, client_id, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: 토큰 : tokenType + ' ' + token (required)
        :param str client_id: API Key (required)
        :param str password: 비밀번호 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.member_confirm_password_get_with_http_info(authorization, client_id, password, **kwargs)  # noqa: E501
        else:
            (data) = self.member_confirm_password_get_with_http_info(authorization, client_id, password, **kwargs)  # noqa: E501
            return data

    def member_confirm_password_get_with_http_info(self, authorization, client_id, password, **kwargs):  # noqa: E501
        """비밀번호 확인  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.member_confirm_password_get_with_http_info(authorization, client_id, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: 토큰 : tokenType + ' ' + token (required)
        :param str client_id: API Key (required)
        :param str password: 비밀번호 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method member_confirm_password_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `member_confirm_password_get`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `member_confirm_password_get`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `member_confirm_password_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'password' in params:
            query_params.append(('password', params['password']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501
        if 'client_id' in params:
            header_params['client-id'] = params['client_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/confirm-password', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def member_find_id_get(self, client_id, site_id, name, phone, **kwargs):  # noqa: E501
        """아이디 찾기  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.member_find_id_get(client_id, site_id, name, phone, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: API Key (required)
        :param str site_id: 학교 아이디 (required)
        :param str name: 이름 (required)
        :param str phone: 전화번호 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.member_find_id_get_with_http_info(client_id, site_id, name, phone, **kwargs)  # noqa: E501
        else:
            (data) = self.member_find_id_get_with_http_info(client_id, site_id, name, phone, **kwargs)  # noqa: E501
            return data

    def member_find_id_get_with_http_info(self, client_id, site_id, name, phone, **kwargs):  # noqa: E501
        """아이디 찾기  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.member_find_id_get_with_http_info(client_id, site_id, name, phone, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: API Key (required)
        :param str site_id: 학교 아이디 (required)
        :param str name: 이름 (required)
        :param str phone: 전화번호 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'site_id', 'name', 'phone']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method member_find_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `member_find_id_get`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `member_find_id_get`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `member_find_id_get`")  # noqa: E501
        # verify the required parameter 'phone' is set
        if ('phone' not in params or
                params['phone'] is None):
            raise ValueError("Missing the required parameter `phone` when calling `member_find_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'site_id' in params:
            query_params.append(('siteId', params['site_id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'phone' in params:
            query_params.append(('phone', params['phone']))  # noqa: E501

        header_params = {}
        if 'client_id' in params:
            header_params['client-id'] = params['client_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/find-id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def member_find_password_get(self, client_id, site_id, name, id, phone, **kwargs):  # noqa: E501
        """비밀번호 찾기 / 처음에 인증번호 없이 보내면 알림톡으로 인증번호 발송됨 두번째는 인증번호와 함께 다시 전송.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.member_find_password_get(client_id, site_id, name, id, phone, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: API Key (required)
        :param str site_id: 학교 아이디 (required)
        :param str name: 이름 (required)
        :param str id: 아이디 (required)
        :param str phone: 전화번호 (required)
        :param str auth_number: 인증번호 (알림톡 발송된 인증번호 입력)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.member_find_password_get_with_http_info(client_id, site_id, name, id, phone, **kwargs)  # noqa: E501
        else:
            (data) = self.member_find_password_get_with_http_info(client_id, site_id, name, id, phone, **kwargs)  # noqa: E501
            return data

    def member_find_password_get_with_http_info(self, client_id, site_id, name, id, phone, **kwargs):  # noqa: E501
        """비밀번호 찾기 / 처음에 인증번호 없이 보내면 알림톡으로 인증번호 발송됨 두번째는 인증번호와 함께 다시 전송.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.member_find_password_get_with_http_info(client_id, site_id, name, id, phone, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: API Key (required)
        :param str site_id: 학교 아이디 (required)
        :param str name: 이름 (required)
        :param str id: 아이디 (required)
        :param str phone: 전화번호 (required)
        :param str auth_number: 인증번호 (알림톡 발송된 인증번호 입력)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'site_id', 'name', 'id', 'phone', 'auth_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method member_find_password_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `member_find_password_get`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `member_find_password_get`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `member_find_password_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `member_find_password_get`")  # noqa: E501
        # verify the required parameter 'phone' is set
        if ('phone' not in params or
                params['phone'] is None):
            raise ValueError("Missing the required parameter `phone` when calling `member_find_password_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'site_id' in params:
            query_params.append(('siteId', params['site_id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'phone' in params:
            query_params.append(('phone', params['phone']))  # noqa: E501
        if 'auth_number' in params:
            query_params.append(('authNumber', params['auth_number']))  # noqa: E501

        header_params = {}
        if 'client_id' in params:
            header_params['client-id'] = params['client_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/find-password', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def member_info_get(self, authorization, client_id, password, **kwargs):  # noqa: E501
        """내정보 가져가기  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.member_info_get(authorization, client_id, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: 토큰 : tokenType + ' ' + token (required)
        :param str client_id: API Key (required)
        :param str password: 비밀번호 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.member_info_get_with_http_info(authorization, client_id, password, **kwargs)  # noqa: E501
        else:
            (data) = self.member_info_get_with_http_info(authorization, client_id, password, **kwargs)  # noqa: E501
            return data

    def member_info_get_with_http_info(self, authorization, client_id, password, **kwargs):  # noqa: E501
        """내정보 가져가기  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.member_info_get_with_http_info(authorization, client_id, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: 토큰 : tokenType + ' ' + token (required)
        :param str client_id: API Key (required)
        :param str password: 비밀번호 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method member_info_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `member_info_get`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `member_info_get`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `member_info_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'password' in params:
            query_params.append(('password', params['password']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501
        if 'client_id' in params:
            header_params['client-id'] = params['client_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def member_info_put(self, authorization, client_id, password, **kwargs):  # noqa: E501
        """내정보 수정하기  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.member_info_put(authorization, client_id, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: 토큰 : tokenType + ' ' + token (required)
        :param str client_id: API Key (required)
        :param str password: 비밀번호 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.member_info_put_with_http_info(authorization, client_id, password, **kwargs)  # noqa: E501
        else:
            (data) = self.member_info_put_with_http_info(authorization, client_id, password, **kwargs)  # noqa: E501
            return data

    def member_info_put_with_http_info(self, authorization, client_id, password, **kwargs):  # noqa: E501
        """내정보 수정하기  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.member_info_put_with_http_info(authorization, client_id, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: 토큰 : tokenType + ' ' + token (required)
        :param str client_id: API Key (required)
        :param str password: 비밀번호 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method member_info_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `member_info_put`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `member_info_put`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `member_info_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'password' in params:
            query_params.append(('password', params['password']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501
        if 'client_id' in params:
            header_params['client-id'] = params['client_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/info', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def member_me_get(self, body, authorization, client_id, **kwargs):  # noqa: E501
        """내 정보  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.member_me_get(body, authorization, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Device body: 기기 정보 (required)
        :param str authorization: 토큰 : tokenType + ' ' + token (required)
        :param str client_id: API Key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.member_me_get_with_http_info(body, authorization, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.member_me_get_with_http_info(body, authorization, client_id, **kwargs)  # noqa: E501
            return data

    def member_me_get_with_http_info(self, body, authorization, client_id, **kwargs):  # noqa: E501
        """내 정보  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.member_me_get_with_http_info(body, authorization, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Device body: 기기 정보 (required)
        :param str authorization: 토큰 : tokenType + ' ' + token (required)
        :param str client_id: API Key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method member_me_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `member_me_get`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `member_me_get`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `member_me_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501
        if 'client_id' in params:
            header_params['client-id'] = params['client_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/me', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def member_phone_get(self, client_id, tid, auth_info, **kwargs):  # noqa: E501
        """전화번호 인증  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.member_phone_get(client_id, tid, auth_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: API Key (required)
        :param str tid: 본인인증에서 callback 받은 tid (required)
        :param str auth_info: 본인인증에서 callback 받은 auth_info (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.member_phone_get_with_http_info(client_id, tid, auth_info, **kwargs)  # noqa: E501
        else:
            (data) = self.member_phone_get_with_http_info(client_id, tid, auth_info, **kwargs)  # noqa: E501
            return data

    def member_phone_get_with_http_info(self, client_id, tid, auth_info, **kwargs):  # noqa: E501
        """전화번호 인증  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.member_phone_get_with_http_info(client_id, tid, auth_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: API Key (required)
        :param str tid: 본인인증에서 callback 받은 tid (required)
        :param str auth_info: 본인인증에서 callback 받은 auth_info (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'tid', 'auth_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method member_phone_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `member_phone_get`")  # noqa: E501
        # verify the required parameter 'tid' is set
        if ('tid' not in params or
                params['tid'] is None):
            raise ValueError("Missing the required parameter `tid` when calling `member_phone_get`")  # noqa: E501
        # verify the required parameter 'auth_info' is set
        if ('auth_info' not in params or
                params['auth_info'] is None):
            raise ValueError("Missing the required parameter `auth_info` when calling `member_phone_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'tid' in params:
            query_params.append(('tid', params['tid']))  # noqa: E501
        if 'auth_info' in params:
            query_params.append(('auth_info', params['auth_info']))  # noqa: E501

        header_params = {}
        if 'client_id' in params:
            header_params['client-id'] = params['client_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/phone', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
