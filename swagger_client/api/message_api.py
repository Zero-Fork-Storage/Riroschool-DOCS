# coding: utf-8

"""
    리로스쿨 API

    리로스쿨 2.9 버전의 API  # noqa: E501

    OpenAPI spec version: 2.9.0
    Contact: develop@rirosoft.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class MessageApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def message_badge_get(self, authorization, client_id, cookie_token, fcm_code, **kwargs):  # noqa: E501
        """뱃지 가져오기  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_badge_get(authorization, client_id, cookie_token, fcm_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: 토큰 : tokenType + ' ' + token (required)
        :param str client_id: API Key (required)
        :param str cookie_token: API Key (required)
        :param str fcm_code: API Key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.message_badge_get_with_http_info(authorization, client_id, cookie_token, fcm_code, **kwargs)  # noqa: E501
        else:
            (data) = self.message_badge_get_with_http_info(authorization, client_id, cookie_token, fcm_code, **kwargs)  # noqa: E501
            return data

    def message_badge_get_with_http_info(self, authorization, client_id, cookie_token, fcm_code, **kwargs):  # noqa: E501
        """뱃지 가져오기  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_badge_get_with_http_info(authorization, client_id, cookie_token, fcm_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: 토큰 : tokenType + ' ' + token (required)
        :param str client_id: API Key (required)
        :param str cookie_token: API Key (required)
        :param str fcm_code: API Key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'cookie_token', 'fcm_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method message_badge_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `message_badge_get`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `message_badge_get`")  # noqa: E501
        # verify the required parameter 'cookie_token' is set
        if ('cookie_token' not in params or
                params['cookie_token'] is None):
            raise ValueError("Missing the required parameter `cookie_token` when calling `message_badge_get`")  # noqa: E501
        # verify the required parameter 'fcm_code' is set
        if ('fcm_code' not in params or
                params['fcm_code'] is None):
            raise ValueError("Missing the required parameter `fcm_code` when calling `message_badge_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fcm_code' in params:
            query_params.append(('fcmCode', params['fcm_code']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501
        if 'client_id' in params:
            header_params['client-id'] = params['client_id']  # noqa: E501
        if 'cookie_token' in params:
            header_params['cookie-token'] = params['cookie_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/badge', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def message_message_delete(self, authorization, client_id, cookie_token, uid, **kwargs):  # noqa: E501
        """메시지 삭제하기  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_message_delete(authorization, client_id, cookie_token, uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: 토큰 : tokenType + ' ' + token (required)
        :param str client_id: API Key (required)
        :param str cookie_token: API Key (required)
        :param str uid: Message Uid (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.message_message_delete_with_http_info(authorization, client_id, cookie_token, uid, **kwargs)  # noqa: E501
        else:
            (data) = self.message_message_delete_with_http_info(authorization, client_id, cookie_token, uid, **kwargs)  # noqa: E501
            return data

    def message_message_delete_with_http_info(self, authorization, client_id, cookie_token, uid, **kwargs):  # noqa: E501
        """메시지 삭제하기  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_message_delete_with_http_info(authorization, client_id, cookie_token, uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: 토큰 : tokenType + ' ' + token (required)
        :param str client_id: API Key (required)
        :param str cookie_token: API Key (required)
        :param str uid: Message Uid (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'cookie_token', 'uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method message_message_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `message_message_delete`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `message_message_delete`")  # noqa: E501
        # verify the required parameter 'cookie_token' is set
        if ('cookie_token' not in params or
                params['cookie_token'] is None):
            raise ValueError("Missing the required parameter `cookie_token` when calling `message_message_delete`")  # noqa: E501
        # verify the required parameter 'uid' is set
        if ('uid' not in params or
                params['uid'] is None):
            raise ValueError("Missing the required parameter `uid` when calling `message_message_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uid' in params:
            query_params.append(('uid', params['uid']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501
        if 'client_id' in params:
            header_params['client-id'] = params['client_id']  # noqa: E501
        if 'cookie_token' in params:
            header_params['cookie-token'] = params['cookie_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/message', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def message_message_get(self, authorization, client_id, cookie_token, **kwargs):  # noqa: E501
        """메시지 가져오기  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_message_get(authorization, client_id, cookie_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: 토큰 : tokenType + ' ' + token (required)
        :param str client_id: API Key (required)
        :param str cookie_token: API Key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.message_message_get_with_http_info(authorization, client_id, cookie_token, **kwargs)  # noqa: E501
        else:
            (data) = self.message_message_get_with_http_info(authorization, client_id, cookie_token, **kwargs)  # noqa: E501
            return data

    def message_message_get_with_http_info(self, authorization, client_id, cookie_token, **kwargs):  # noqa: E501
        """메시지 가져오기  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_message_get_with_http_info(authorization, client_id, cookie_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: 토큰 : tokenType + ' ' + token (required)
        :param str client_id: API Key (required)
        :param str cookie_token: API Key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'cookie_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method message_message_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `message_message_get`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `message_message_get`")  # noqa: E501
        # verify the required parameter 'cookie_token' is set
        if ('cookie_token' not in params or
                params['cookie_token'] is None):
            raise ValueError("Missing the required parameter `cookie_token` when calling `message_message_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501
        if 'client_id' in params:
            header_params['client-id'] = params['client_id']  # noqa: E501
        if 'cookie_token' in params:
            header_params['cookie-token'] = params['cookie_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/message', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def message_read_get(self, authorization, client_id, cookie_token, num, **kwargs):  # noqa: E501
        """메시지 읽음 표시  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_read_get(authorization, client_id, cookie_token, num, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: 토큰 : tokenType + ' ' + token (required)
        :param str client_id: API Key (required)
        :param str cookie_token: API Key (required)
        :param str num: message num (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.message_read_get_with_http_info(authorization, client_id, cookie_token, num, **kwargs)  # noqa: E501
        else:
            (data) = self.message_read_get_with_http_info(authorization, client_id, cookie_token, num, **kwargs)  # noqa: E501
            return data

    def message_read_get_with_http_info(self, authorization, client_id, cookie_token, num, **kwargs):  # noqa: E501
        """메시지 읽음 표시  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_read_get_with_http_info(authorization, client_id, cookie_token, num, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: 토큰 : tokenType + ' ' + token (required)
        :param str client_id: API Key (required)
        :param str cookie_token: API Key (required)
        :param str num: message num (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'cookie_token', 'num']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method message_read_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `message_read_get`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `message_read_get`")  # noqa: E501
        # verify the required parameter 'cookie_token' is set
        if ('cookie_token' not in params or
                params['cookie_token'] is None):
            raise ValueError("Missing the required parameter `cookie_token` when calling `message_read_get`")  # noqa: E501
        # verify the required parameter 'num' is set
        if ('num' not in params or
                params['num'] is None):
            raise ValueError("Missing the required parameter `num` when calling `message_read_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'num' in params:
            query_params.append(('num', params['num']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501
        if 'client_id' in params:
            header_params['client-id'] = params['client_id']  # noqa: E501
        if 'cookie_token' in params:
            header_params['cookie-token'] = params['cookie_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/message/read', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
