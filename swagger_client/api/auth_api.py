# coding: utf-8

"""
    리로스쿨 API

    리로스쿨 2.9 버전의 API  # noqa: E501

    OpenAPI spec version: 2.9.0
    Contact: develop@rirosoft.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AuthApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def auth_authorize_get(self, client_id, id, password, site_id, **kwargs):  # noqa: E501
        """인증코드 요청  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_authorize_get(client_id, id, password, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: API Key (required)
        :param str id: 사용자 아이디 (required)
        :param str password: 사용자 비밀번호 (required)
        :param str site_id: 학교 아이디 (required)
        :param str parent: 학부모구분 엄마:M, 아빠:F
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_authorize_get_with_http_info(client_id, id, password, site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_authorize_get_with_http_info(client_id, id, password, site_id, **kwargs)  # noqa: E501
            return data

    def auth_authorize_get_with_http_info(self, client_id, id, password, site_id, **kwargs):  # noqa: E501
        """인증코드 요청  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_authorize_get_with_http_info(client_id, id, password, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: API Key (required)
        :param str id: 사용자 아이디 (required)
        :param str password: 사용자 비밀번호 (required)
        :param str site_id: 학교 아이디 (required)
        :param str parent: 학부모구분 엄마:M, 아빠:F
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'id', 'password', 'site_id', 'parent']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_authorize_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `auth_authorize_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `auth_authorize_get`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `auth_authorize_get`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `auth_authorize_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'password' in params:
            query_params.append(('password', params['password']))  # noqa: E501
        if 'site_id' in params:
            query_params.append(('siteId', params['site_id']))  # noqa: E501
        if 'parent' in params:
            query_params.append(('parent', params['parent']))  # noqa: E501

        header_params = {}
        if 'client_id' in params:
            header_params['client-id'] = params['client_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/auth/authorize', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_callback_post(self, **kwargs):  # noqa: E501
        """본인 인증 Callback 페이지  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_callback_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_callback_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.auth_callback_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def auth_callback_post_with_http_info(self, **kwargs):  # noqa: E501
        """본인 인증 Callback 페이지  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_callback_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_callback_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/callback', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_cancel_post(self, **kwargs):  # noqa: E501
        """본인 인증 cancel 페이지  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_cancel_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_cancel_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.auth_cancel_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def auth_cancel_post_with_http_info(self, **kwargs):  # noqa: E501
        """본인 인증 cancel 페이지  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_cancel_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_cancel_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/cancel', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_info_get(self, client_id, tid, auth_info, **kwargs):  # noqa: E501
        """본인 인증  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_info_get(client_id, tid, auth_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: API Key (required)
        :param str tid: 본인인증에서 callback 받은 tid (required)
        :param str auth_info: 본인인증에서 callback 받은 auth_info (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_info_get_with_http_info(client_id, tid, auth_info, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_info_get_with_http_info(client_id, tid, auth_info, **kwargs)  # noqa: E501
            return data

    def auth_info_get_with_http_info(self, client_id, tid, auth_info, **kwargs):  # noqa: E501
        """본인 인증  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_info_get_with_http_info(client_id, tid, auth_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: API Key (required)
        :param str tid: 본인인증에서 callback 받은 tid (required)
        :param str auth_info: 본인인증에서 callback 받은 auth_info (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'tid', 'auth_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_info_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `auth_info_get`")  # noqa: E501
        # verify the required parameter 'tid' is set
        if ('tid' not in params or
                params['tid'] is None):
            raise ValueError("Missing the required parameter `tid` when calling `auth_info_get`")  # noqa: E501
        # verify the required parameter 'auth_info' is set
        if ('auth_info' not in params or
                params['auth_info'] is None):
            raise ValueError("Missing the required parameter `auth_info` when calling `auth_info_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'tid' in params:
            query_params.append(('tid', params['tid']))  # noqa: E501
        if 'auth_info' in params:
            query_params.append(('auth_info', params['auth_info']))  # noqa: E501

        header_params = {}
        if 'client_id' in params:
            header_params['client-id'] = params['client_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/auth/info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_login_get(self, client_id, cookie_token, **kwargs):  # noqa: E501
        """업데이트 이전 사용자들 새 버전로그인으로 갈아타기  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_login_get(client_id, cookie_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: API Key (required)
        :param str cookie_token: API Key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_login_get_with_http_info(client_id, cookie_token, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_login_get_with_http_info(client_id, cookie_token, **kwargs)  # noqa: E501
            return data

    def auth_login_get_with_http_info(self, client_id, cookie_token, **kwargs):  # noqa: E501
        """업데이트 이전 사용자들 새 버전로그인으로 갈아타기  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_login_get_with_http_info(client_id, cookie_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: API Key (required)
        :param str cookie_token: API Key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'cookie_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_login_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `auth_login_get`")  # noqa: E501
        # verify the required parameter 'cookie_token' is set
        if ('cookie_token' not in params or
                params['cookie_token'] is None):
            raise ValueError("Missing the required parameter `cookie_token` when calling `auth_login_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['client-id'] = params['client_id']  # noqa: E501
        if 'cookie_token' in params:
            header_params['cookie-token'] = params['cookie_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/old/login', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_me_get(self, client_id, site_id, **kwargs):  # noqa: E501
        """auth_me_get  # noqa: E501

        본인 인증 순서 1. /api/v2/auth/me 통신 후 response 값 중 mobile_url 값으로 페이지 이동 2. 본인인증 완료 후 url 감지하여 /api/v2/callback 이 페이지로 이동 되면 body 의 json 값을 GET 함 (위 페이지는 노출 되지 않게 가리는것이 좋음) 3. /api/v2/auth/info 통신으로 본인인증한 정보를 받아 온다. 4. 받아온 정보를 이용하여 회원가입을 진행한다.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_me_get(client_id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: API Key (required)
        :param str site_id: 학교 아이디 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_me_get_with_http_info(client_id, site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_me_get_with_http_info(client_id, site_id, **kwargs)  # noqa: E501
            return data

    def auth_me_get_with_http_info(self, client_id, site_id, **kwargs):  # noqa: E501
        """auth_me_get  # noqa: E501

        본인 인증 순서 1. /api/v2/auth/me 통신 후 response 값 중 mobile_url 값으로 페이지 이동 2. 본인인증 완료 후 url 감지하여 /api/v2/callback 이 페이지로 이동 되면 body 의 json 값을 GET 함 (위 페이지는 노출 되지 않게 가리는것이 좋음) 3. /api/v2/auth/info 통신으로 본인인증한 정보를 받아 온다. 4. 받아온 정보를 이용하여 회원가입을 진행한다.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_me_get_with_http_info(client_id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: API Key (required)
        :param str site_id: 학교 아이디 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_me_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `auth_me_get`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `auth_me_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'site_id' in params:
            query_params.append(('siteId', params['site_id']))  # noqa: E501

        header_params = {}
        if 'client_id' in params:
            header_params['client-id'] = params['client_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/auth/me', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_refesh_token_get(self, client_id, authorization, **kwargs):  # noqa: E501
        """토큰 재발급  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_refesh_token_get(client_id, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: API Key (required)
        :param str authorization: 토큰 : tokenType + ' ' + refreshToken (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_refesh_token_get_with_http_info(client_id, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_refesh_token_get_with_http_info(client_id, authorization, **kwargs)  # noqa: E501
            return data

    def auth_refesh_token_get_with_http_info(self, client_id, authorization, **kwargs):  # noqa: E501
        """토큰 재발급  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_refesh_token_get_with_http_info(client_id, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: API Key (required)
        :param str authorization: 토큰 : tokenType + ' ' + refreshToken (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_refesh_token_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `auth_refesh_token_get`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `auth_refesh_token_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['client-id'] = params['client_id']  # noqa: E501
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/auth/refresh-token', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_sign_out_get(self, client_id, authorization_code, **kwargs):  # noqa: E501
        """로그아웃  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_sign_out_get(client_id, authorization_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: API Key (required)
        :param str authorization_code: 인증 코드 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_sign_out_get_with_http_info(client_id, authorization_code, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_sign_out_get_with_http_info(client_id, authorization_code, **kwargs)  # noqa: E501
            return data

    def auth_sign_out_get_with_http_info(self, client_id, authorization_code, **kwargs):  # noqa: E501
        """로그아웃  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_sign_out_get_with_http_info(client_id, authorization_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: API Key (required)
        :param str authorization_code: 인증 코드 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'authorization_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_sign_out_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `auth_sign_out_get`")  # noqa: E501
        # verify the required parameter 'authorization_code' is set
        if ('authorization_code' not in params or
                params['authorization_code'] is None):
            raise ValueError("Missing the required parameter `authorization_code` when calling `auth_sign_out_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'authorization_code' in params:
            query_params.append(('authorizationCode', params['authorization_code']))  # noqa: E501

        header_params = {}
        if 'client_id' in params:
            header_params['client-id'] = params['client_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/auth/sign-out', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_token_get(self, client_id, authorization_code, **kwargs):  # noqa: E501
        """토큰 발급  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_token_get(client_id, authorization_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: API Key (required)
        :param str authorization_code: 인증 코드 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_token_get_with_http_info(client_id, authorization_code, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_token_get_with_http_info(client_id, authorization_code, **kwargs)  # noqa: E501
            return data

    def auth_token_get_with_http_info(self, client_id, authorization_code, **kwargs):  # noqa: E501
        """토큰 발급  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_token_get_with_http_info(client_id, authorization_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: API Key (required)
        :param str authorization_code: 인증 코드 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'authorization_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_token_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `auth_token_get`")  # noqa: E501
        # verify the required parameter 'authorization_code' is set
        if ('authorization_code' not in params or
                params['authorization_code'] is None):
            raise ValueError("Missing the required parameter `authorization_code` when calling `auth_token_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'authorization_code' in params:
            query_params.append(('authorizationCode', params['authorization_code']))  # noqa: E501

        header_params = {}
        if 'client_id' in params:
            header_params['client-id'] = params['client_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/auth/token', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
